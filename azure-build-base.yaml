trigger:
  branches:
    include:
    - master
    - refs/tags/base-*
  paths:
    include:
    - QuerySpecification/*

pr:
- master

pool:
  vmImage: 'windows-2019'

variables:
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  solution: '**/*.sln'

steps:

# Prepare
- task: DotNetCoreCLI@2
  displayName: 'dotnet info'
  inputs:
    command: custom
    custom: '--info'

- task: DotNetCoreCLI@2
  displayName: 'dotnet version'
  inputs:
    command: custom
    custom: '--version'

- task: NuGetToolInstaller@0
  displayName: 'Use NuGet 5.9.0'
  inputs:
    versionSpec: 5.9.0

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
    
# Build    
- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    arguments: '--output $(Build.ArtifactStagingDirectory)'

# Run tests and create coverage report
- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
    projects: 'QuerySpecification/tests/**/*.csproj'
    nobuild: true

- task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
  displayName: ReportGenerator
  inputs:
    reports: '$(Build.SourcesDirectory)/QuerySpecification/tests/**/coverage.cobertura.xml'
    targetdir: '$(Build.SourcesDirectory)/CodeCoverageBase'
    reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
    assemblyfilters: '-xunit*'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverageBase/Cobertura.xml'
#    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverageBase'

- task: CopyFiles@2
  displayName: 'Copy *.nupkg Files'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: 'QuerySpecification/**/*.nupkg'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\QuerySpecificationPackage'
    flattenFolders: true
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

# Publish
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\QuerySpecificationPackage'
    artifactName: QuerySpecificationPackage
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))